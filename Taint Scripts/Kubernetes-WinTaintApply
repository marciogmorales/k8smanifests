Add taint
#Taint Windows Server 1909 with os=Win1909
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os=Win1909:NoSchedule --overwrite ; done

#Taint Windows Server 1809(Windows Server 2019/Ltcs 2019) with os=Win1809
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server 2019 Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os=Win1809:NoSchedule --overwrite ; done

Remove taint
#Taint Windows Server 1909 with os=Win1909
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os- --overwrite ; done

#Taint Windows Server 1809(Windows Server 2019/Ltcs 2019) with os=Win1809
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server 2019 Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os- --overwrite ; done

--------

TEST

Add taint
#Taint Windows Server 2004 with os=Win2004
for i in $(kubectl get nodes -l node.kubernetes.io/windows-build=10.0.19041 -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | awk '{print $1}'); do date &&  kubectl taint nodes $i os=Win2004:NoSchedule --overwrite ; done

#Taint Windows Server 1809(Windows Server 2019/Ltcs 2019) with os=Win1809
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server 2019 Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os=Win1809:NoSchedule --overwrite ; done

Remove taint
#Taint Windows Server 2004 with os=Win2004
for i in $(kubectl get nodes -l node.kubernetes.io/windows-build=10.0.19041 -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | awk '{print $1}'); do date &&  kubectl taint nodes $i os- --overwrite ; done

#Taint Windows Server 1809(Windows Server 2019/Ltcs 2019) with os=Win1809
for i in $(kubectl get nodes -l beta.kubernetes.io/os=windows -o wide --no-headers | grep -w "Ready" | egrep -v SchedulingDisabled | grep -w "Windows Server 2019 Datacenter" | awk '{print $1}'); do date &&  kubectl taint nodes $i os- --overwrite ; done

------------

Clear




Taints and Tolerations

Users today need to use some combination of taints and node selectors in order to keep Linux and Windows workloads on their respective OS-specific nodes. This likely imposes a burden only on Windows users. The recommended approach is outlined below, with one of its main goals being that this approach should not break compatibility for existing Linux workloads.
Ensuring OS-specific workloads land on the appropriate container host

Users can ensure Windows containers can be scheduled on the appropriate host using Taints and Tolerations. All Kubernetes nodes today have the following default labels:

    kubernetes.io/os = [windows|linux]
    kubernetes.io/arch = [amd64|arm64|...]

If a Pod specification does not specify a nodeSelector like "kubernetes.io/os": windows, it is possible the Pod can be scheduled on any host, Windows or Linux. This can be problematic since a Windows container can only run on Windows and a Linux container can only run on Linux. The best practice is to use a nodeSelector.

However, we understand that in many cases users have a pre-existing large number of deployments for Linux containers, as well as an ecosystem of off-the-shelf configurations, such as community Helm charts, and programmatic Pod generation cases, such as with Operators. In those situations, you may be hesitant to make the configuration change to add nodeSelectors. The alternative is to use Taints. Because the kubelet can set Taints during registration, it could easily be modified to automatically add a taint when running on Windows only.

For example: --register-with-taints='os=windows:NoSchedule'

By adding a taint to all Windows nodes, nothing will be scheduled on them (that includes existing Linux Pods). In order for a Windows Pod to be scheduled on a Windows node, it would need both the nodeSelector to choose Windows, and the appropriate matching toleration.

nodeSelector:
    kubernetes.io/os: windows
    node.kubernetes.io/windows-build: '10.0.17763'
tolerations:
    - key: "os"
      operator: "Equal"
      value: "windows"
      effect: "NoSchedule"